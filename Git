GIT:
Es un sistema de control de versiones.

Instalación:
Opción 1: https://git-scm.com/
Opción 2: http://git-scm.com/download/mac

En terminal:
git --version

Actualizar git:
brew upgrade git

Agregar credenciales:
git config --global user.email "tu@email.com"
git config --global user.name "Tu Nombre"

Primeros pasos:
git init
git add .
git commit -m "Soy el comentario de un commit"

Estados de los archivos:

- Archivos Tracked: son los archivos que viven dentro de Git, no tienen cambios pendientes y sus últimas actualizaciones han sido guardadas en el repositorio gracias a los comandos git add y git commit.
- Archivos Staged: son archivos en Staging. Viven dentro de Git y hay registro de ellos porque han sido afectados por el comando git add, aunque no sus últimos cambios. Git ya sabe de la existencia de estos últimos cambios, pero todavía no han sido guardados definitivamente en el repositorio porque falta ejecutar el comando git commit.
- Archivos Unstaged: entiéndelos como archivos “Tracked pero Unstaged”. Son archivos que viven dentro de Git pero no han sido afectados por el comando git add ni mucho menos por git commit. Git tiene un registro de estos archivos, pero está desactualizado, sus últimas versiones solo están guardadas en el disco duro.
- Archivos Untracked: son archivos que NO viven dentro de Git, solo en el disco duro. Nunca han sido afectados por git add, así que Git no tiene registros de su existencia.
  Recuerda que hay un caso muy raro donde los archivos tienen dos estados al mismo tiempo: staged y untracked. Esto pasa cuando guardas los cambios de un archivo en el área de Staging (con el comando git add), pero antes de hacer commit para guardar los cambios en el repositorio haces nuevos cambios que todavía no han sido guardados en el área de Staging (en realidad, todo sigue funcionando igual pero es un poco divertido).

Comandos para mover archivos entre los estados de Git:

- git status: nos permite ver el estado de todos nuestros archivos y carpetas.
- git add: nos ayuda a mover archivos del Untracked o Unstaged al estado Staged. Podemos usar git nombre-del-archivo-o-carpeta para añadir archivos y carpetas individuales o git add -A para mover todos los archivos de nuestro proyecto (tanto Untrackeds como unstageds).
- git reset HEAD: nos ayuda a sacar archivos del estado Staged para devolverlos a su estado anterior. Si los archivos venían de Unstaged, vuelven allí. Y lo mismo se venían de Untracked.
- git commit: nos ayuda a mover archivos de Unstaged a Tracked. Esta es una ocasión especial, los archivos han sido guardados o actualizados en el repositorio. Git nos pedirá que dejemos un mensaje para recordar los cambios que hicimos y podemos usar el argumento -m para escribirlo (git commit -m "mensaje").
- git rm: este comando necesita alguno de los siguientes argumentos para poder ejecutarse correctamente:
- git rm --cached: Mueve los archivos que le indiquemos al estado Untracked.
- git rm --force: Elimina los archivos de Git y del disco duro. Git guarda el registro de la existencia de los archivos, por lo que podremos recuperarlos si es necesario (pero debemos usar comandos más avanzados).

- git stash: Guardar cambios en memoria y recuperarlos después

Stashed:
El stashed nos sirve para guardar cambios para después, Es una lista de estados que nos guarda algunos cambios que hicimos en Staging para poder cambiar de rama sin perder el trabajo que todavía no guardamos en un commit

Ésto es especialmente útil porque hay veces que no se permite cambiar de rama, ésto porque porque tenemos cambios sin guardar, no siempre es un cambio lo suficientemente bueno como para hacer un commit, pero no queremos perder ese código en el que estuvimos trabajando.

El stashed nos permite cambiar de ramas, hacer cambios, trabajar en otras cosas y, más adelante, retomar el trabajo con los archivos que teníamos en Staging pero que podemos recuperar ya que los guardamos en el Stash.

git stash
El comando git stash guarda el trabajo actual del Staging en una lista diseñada para ser temporal llamada Stash, para que pueda ser recuperado en el futuro.

Para agregar los cambios al stash se utiliza el comando:

git stash
Podemos poner un mensaje en el stash, para asi diferenciarlos en git stash list por si tenemos varios elementos en el stash. Ésto con:

git stash save "mensaje identificador del elemento del stashed"
Obtener elelmentos del stash
El stashed se comporta como una Stack de datos comportándose de manera tipo LIFO (del inglés Last In, First Out, «último en entrar, primero en salir»), así podemos acceder al método pop.

El método pop recuperará y sacará de la lista el último estado del stashed y lo insertará en el staging area, por lo que es importante saber en qué branch te encuentras para poder recuperarlo, ya que el stash será agnóstico a la rama o estado en el que te encuentres, siempre recuperará los cambios que hiciste en el lugar que lo llamas.

Para recuperar los últimos cambios desde el stash a tu staging area utiliza el comando:

git stash pop
Para aplicar los cambios de un stash específico y eliminarlo del stash:

git stash pop stash@{<num_stash>}
Para retomar los cambios de una posición específica del Stash puedes utilizar el comando:

git stash apply stash@{<num_stash>}
Donde el <num_stash> lo obtienes desden el git stash list

Listado de elementos en el stash
Para ver la lista de cambios guardados en Stash y así poder recuperarlos o hacer algo con ellos podemos utilizar el comando:

git stash list
Retomar los cambios de una posición específica del Stash || Aplica los cambios de un stash específico

Crear una rama con el stash
Para crear una rama y aplicar el stash mas reciente podemos utilizar el comando

git stash branch <nombre_de_la_rama>
Si deseas crear una rama y aplicar un stash específico (obtenido desde git stash list) puedes utilizar el comando:

git stash branch nombre_de_rama stash@{<num_stash>}
Al utilizar estos comandos crearás una rama con el nombre <nombre_de_la_rama>, te pasarás a ella y tendrás el stash especificado en tu staging area.

Eliminar elementos del stash
Para eliminar los cambios más recientes dentro del stash (el elemento 0), podemos utilizar el comando:

git stash drop
Pero si en cambio conoces el índice del stash que quieres borrar (mediante git stash list) puedes utilizar el comando:

git stash drop stash@{<num_stash>}
Donde el <num_stash> es el índice del cambio guardado.

Si en cambio deseas eliminar todos los elementos del stash, puedes utilizar:

git stash clear
Consideraciones:

El cambio más reciente (al crear un stash) SIEMPRE recibe el valor 0 y los que estaban antes aumentan su valor.
Al crear un stash tomará los archivos que han sido modificados y eliminados. Para que tome un archivo creado es necesario agregarlo al Staging Area con git add [nombre_archivo] con la intención de que git tenga un seguimiento de ese archivo, o también utilizando el comando git stash -u (que guardará en el stash los archivos que no estén en el staging).
Al aplicar un stash este no se elimina, es buena práctica eliminarlo.

- git clean
  Mientras estamos trabajando en un repositorio podemos añadir archivos a él, que realmente no forma parte de nuestro directorio de trabajo, archivos que no se deberían de agregar al repositorio remoto.

El comando clean actúa en archivos sin seguimiento, este tipo de archivos son aquellos que se encuentran en el directorio de trabajo, pero que aún no se han añadido al índice de seguimiento de repositorio con el comando add.

$ git clean

La ejecución del comando predeterminado puede producir un error. La configuración global de Git obliga a usar la opción force con el comando para que sea efectivo. Se trata de un importante mecanismo de seguridad ya que este comando no se puede deshacer.

Revisar que archivos no tienen seguimiento.
$ git clean --dry-run

Eliminar los archivos listados de no seguimiento.
$ git clean -f

Nota: ejecuta git clean --dry-run, y cuando estés seguro de que desea eliminarlos, ejecutas git clean -f

Archivos que se hayan modificado o editados git clean no interviene aquí.

- git cherry-pick numeroCommit
  Git Cherry-pick es un comando que permite tomar uno o varios commits de otra rama sin tener que hacer un merge completo. Así, gracias a cherry-pick, podríamos aplicar los commits relacionados con nuestra funcionalidad en la rama master sin necesidad de hacer un merge.

Para demostrar cómo utilizar git cherry-pick, supongamos que tenemos un repositorio con el siguiente estado de rama:

a -b - c - d Master
\
 e - f - g Feature

El uso de git cherry-pick es sencillo y se puede ejecutar de la siguiente manera:

git checkoutmaster
En este ejemplo, commitSha es una referencia de confirmación. Puedes encontrar una referencia de confirmación utilizando el comando git log. En este caso, imaginemos que queremos utilizar la confirmación ‘f’ en la rama master. Para ello, primero debemos asegurarnos de que estamos trabajando con esa rama master.

git cherry-pick f

Una vez ejecutado, el historial de Git se verá así:

a -b - c - d - f Master
\
 e - f - g Feature

La confirmación f se ha sido introducido con éxito en la rama de funcionalidad

Atención
Cherry-pick es una mala práctica porque significa que estamos reconstruyendo la historia, usa cherry-pick con sabiduría. Si no sabes lo que estás haciendo, mejor evita emplear este comando.

Git Reset y Reflog: úsese en caso de emergencia
Git nunca olvida, git reflog
Git guarda todos los cambios aunque decidas borrarlos, al borrar un cambio lo que estás haciendo sólo es actualizar la punta del branch, para gestionar éstas puntas existe un mecanismo llamado registros de referencia o reflogs…La gestión de estos cambios es mediante los hash’es de referencia (o ref) que son apuntadores a los commits…Los recoges registran cuándo se actualizaron las referencias de Git en el repositorio local (sólo en el local), por lo que si deseas ver cómo has modificado la historia puedes utilizar el comando:

git reflog

Muchos comandos de Git aceptan un parámetro para especificar una referencia o “ref”, que es un puntero a una confirmación sobre todo los comandos:

git checkout Puedes moverte sin realizar ningún cambio al commit exacto de la ref

git checkout eff544f

git reset: Hará que el último commit sea el pasado por la ref, usar este comando sólo si sabes exactamente qué estás haciendo

git reset --hard eff544f # Perderá todo lo que se encuentra en staging y en el Working directory y se moverá el head al commit eff544f
git reset --soft eff544f # Te recuperará todos los cambios que tengas diferentes al commit eff544f, los agregará al staging area y moverá el head al commit eff544f

git merge: Puedes hacer merge de un commit en específico, funciona igual que con una branch, pero te hace el merge del estado específico del commit mandado

git checkout master
git merge eff544f # Fusionará en un nuevo commit la historia de master con el momento específico en el que vive
¿Qué pasa cuando todo se rompe y no sabemos qué está pasando? Con git reset HashDelHEAD nos devolveremos al estado en que el proyecto funcionaba.

git reset --soft HashDelHEAD te mantiene lo que tengas en staging ahí.
git reset --hard HashDelHEAD resetea absolutamente todo incluyendo lo que tengas en staging.
Atención
git reset es una mala práctica, no deberías usarlo en ningún momento. Debe ser nuestro último recurso.

git grep:
A medida que nuestro proyecto en Git se hace más grande, vamos a querer buscar ciertas cosas.

Por ejemplo: ¿cuántas veces en nuestro proyecto utilizamos la palabra color?

Para buscar, empleamos el comando git grep color y nos buscará en todo el proyecto los archivos en donde está la palabra color.

Con git grep -n color ( nos saldrá un output el cual nos dirá en qué línea está lo que estamos buscando)
Con git grep -c color (nos saldrá un output el cual nos dirá cuántas veces se repite esa palabra y en qué archivo)
Si queremos buscar cuántas veces utilizamos un atributo de HTML lo hacemos con git grep -c "<p>"

- git init
  - creates a new Git repository
- git status
  - inspects the contents of the working directory and staging area
- git add
  - adds files from the working directory to the staging area
- git rm --cached nombreArchivo
  - Sirve para mover el archivo de lo que se agregará en el commit, es cuando por error agregamos archivos a
    los que no queremos hacer seguimiento.
- git diff numeroCommit otroNumeroCommit
  - shows the difference between the working directory and the staging area
  -
- git commit
  - permanently stores file changes from the staging area in the repository
- git commit -am "Esto es lo mismo que primero hacer add y después commit" Nota: Solo funciona con archivos a los que se les hizo track previamente
- git log
  - shows a list of all previous commits
- git log  - -oneline
- git log --oneline --graph
- git log -1
- git show

  - Muestra los cambios que se han realizado, directamente en la terminal

  - Muestra el último commit

- git checkout HEAD filename
  - Discards changes in the working directory.
- git reset HEAD filename
  - Unstages file changes in the staging area.
- git reset SHA
  - Can be used to reset to a previous commit in your commit history.
- git add filename_1 filename_2
- git checkout idCommit
  - Nos permite viajar en el tiempo Podemos volver a cualquier versión anterior de un archivo específico o incluso del proyecto entero
- git reset idCommit --hard (Usar este comando con mucho cuidado)
  - Borra toda la información que tengamos en el área de staging (y perdiendo todo para siempre)
  - Borra todo. Todo todito, absolutamente todo. Toda la información de los commits y del área de staging se borra del historial.
- git reset idCommit --soft

  - Mantiene allí los archivos del área de staging para que podamos aplicar nuestros últimos cambios pero desde un commit anterior.
  - Borramos todo el historial y los registros de Git pero guardamos los cambios que tengamos en Staging, así podemos aplicar las últimas actualizaciones a un nuevo commit

- git log

  - git log --oneline - Te muestra el id commit y el título del commit.
  - git log --decorate- Te muestra donde se encuentra el head point en el log.
  - git log --stat - Explica el número de líneas que se cambiaron brevemente.
  - git log -p- Explica el número de líneas que se cambiaron y te muestra que se cambió en el contenido.
  - git shortlog - Indica que commits ha realizado un usuario, mostrando el usuario y el titulo de sus commits.
  - git log --graph --oneline --decorate y
  - git log --pretty=format:"%cn hizo un commit %h el dia %cd" - Muestra mensajes personalizados de los commits.
  - git log -3 - Limitamos el número de commits.
  - git log --after=“2018-1-2” ,
  - git log --after=“today” y
  - git log --after=“2018-1-2” --before=“today” - Commits para localizar por fechas.
  - git log --author=“Name Author” - Commits realizados por autor que cumplan exactamente con el nombre.
  - git log --grep=“INVIE” - Busca los commits que cumplan tal cual está escrito entre las comillas.
  - git log --grep=“INVIE” –i- Busca los commits que cumplan sin importar mayúsculas o minúsculas.
  - git log – index.html- Busca los commits en un archivo en específico.
  - git log -S “Por contenido”- Buscar los commits con el contenido dentro del archivo.
  - git log > log.txt - guardar los logs en un archivo txt

- Crear un tag: git tag -a v1.0 -m "Mi primer tag" 7005953
- git tag (Muestra la lista de todos los tags)
- git show-ref --tags (Muestra a que commit hace referencia un tag)
- git push origin --tags (Enviar tag a repo en github)
- git tag -d nombreTag (Borrar un tag en local)
- git push origin :refs/tags/nombreTag (Borrar tag en github)

- git branch -l
  - Lists all a Git project's branches.
- git branch branch_name
  - Creates a new branch.
- git checkout -b nombreRama
  - Crea la rama y te cambia a esa rama
- git branch -d nombreRama
  - Borra una rama de mi local
- git branch -D nombreRama
  - Forzar borrado de rama
- Git branch -m nombreActual nuevoNombreRama
  - Renombrar una rama
- git checkout branch_name
  - Used to switch from one branch to another.
- git merge branch_name
  - Used to join file changes from one branch to another.
- git branch -d branch_name
  - Deletes the branch specified.
- git push origin nombreRama

  - Envía la rama local al repositorio de github

- git clone
  - Creates a local copy of a remote.
- git remote -v
  - Lists a Git project's remotes.
- git fetch
  - Fetches work from the remote into the local copy.
- git merge ramaAfusionar
  - Merges ramaAfusionar en la rama que estoy actualmente.
- git push origin <branch_name>
  - Pushes a local branch to the origin remote.
- git checkout -b nombreRama

  - Crea una rama y apunta a esa rama

- git stash
  - git stash list
  - git stash drop stash@{1}
  - git stash apply
  - Guardar cambios temporales en una rama
- git cherry-pick 0894d24
  - Sirve para elegir commits que erróneamente se hicieron en alguna otra rama
- touch .gitignore 
  www.gitignore.io

GitFlow: Es una una guía que nos da cierto estándares para manejar la ramificación de nuestros proyectos.
https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow
https://danielkummer.github.io/git-flow-cheatsheet/

fatal: remote origin already exists.
git remote rm origin

Modificar un commit:
Ejemplo -> Si quiero modificar el titulo del commit
git commit --amend (Esto aplica para el último commit)
fn + i (para comenzar a editar)
esc
:wq (para guardar)
git push --force (Se refleja el cambio en github)

Ejemplo -> Si se me olvidó agregar un archivo al último commit
git add nombreArchivo
git commit --amend (Esto aplica para el último commit)
fn + i (para comenzar a editar)
esc
:wq (para guardar)
git push --force (Se refleja el cambio en github)

Este comando sirve para agregar archivos nuevos o actualizar el commit anterior y no generar commits innecesarios. También es una forma sencilla de editar o agregar comentarios al commit anterior porque abrirá la consola para editar este commit anterior.

Atención
Usar amend es una mala práctica, sobre todo cuando ya se ha hecho push o pull al repositorio remoto. Al momento de hacer amend con algún commit que esté en remoto, va a generar un conflicto que se va a arreglar haciendo un commit adicional y se perderá el beneficio del amend.

Hacer push de una rama local a github (Pushes a local branch to the origin remote):
git push origin <branch_name>

Issue de token:
remote: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead.
Solución:
https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/

Ir a github: Settings -> Developer settings -> Personal Access Tokens -> Generate new token

$ git clone https://github.com/username/repo.git
Username: your_username
Password: your_token (token recien generado en github)

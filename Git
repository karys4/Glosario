GIT:
Es un sistema de control de versiones.

Instalación:
Opción 1: https://git-scm.com/
Opción 2: http://git-scm.com/download/mac

En terminal: 
git --version

Actualizar git:
brew upgrade git

Agregar credenciales:
git config --global user.email "tu@email.com"
git config --global user.name "Tu Nombre"

Primeros pasos:
git init 
git add .
git commit -m "Soy el comentario de un commit"

Estados de los archivos:
- Archivos Tracked: son los archivos que viven dentro de Git, no tienen cambios pendientes y sus últimas actualizaciones han sido guardadas en el repositorio gracias a los comandos git add y git commit.
- Archivos Staged: son archivos en Staging. Viven dentro de Git y hay registro de ellos porque han sido afectados por el comando git add, aunque no sus últimos cambios. Git ya sabe de la existencia de estos últimos cambios, pero todavía no han sido guardados definitivamente en el repositorio porque falta ejecutar el comando git commit.
- Archivos Unstaged: entiéndelos como archivos “Tracked pero Unstaged”. Son archivos que viven dentro de Git pero no han sido afectados por el comando git add ni mucho menos por git commit. Git tiene un registro de estos archivos, pero está desactualizado, sus últimas versiones solo están guardadas en el disco duro.
- Archivos Untracked: son archivos que NO viven dentro de Git, solo en el disco duro. Nunca han sido afectados por git add, así que Git no tiene registros de su existencia.
Recuerda que hay un caso muy raro donde los archivos tienen dos estados al mismo tiempo: staged y untracked. Esto pasa cuando guardas los cambios de un archivo en el área de Staging (con el comando git add), pero antes de hacer commit para guardar los cambios en el repositorio haces nuevos cambios que todavía no han sido guardados en el área de Staging (en realidad, todo sigue funcionando igual pero es un poco divertido).

Comandos para mover archivos entre los estados de Git:

- git status: nos permite ver el estado de todos nuestros archivos y carpetas.
- git add: nos ayuda a mover archivos del Untracked o Unstaged al estado Staged. Podemos usar git nombre-del-archivo-o-carpeta para añadir archivos y carpetas individuales o git add -A para mover todos los archivos de nuestro proyecto (tanto Untrackeds como unstageds).
- git reset HEAD: nos ayuda a sacar archivos del estado Staged para devolverlos a su estado anterior. Si los archivos venían de Unstaged, vuelven allí. Y lo mismo se venían de Untracked.
- git commit: nos ayuda a mover archivos de Unstaged a Tracked. Esta es una ocasión especial, los archivos han sido guardados o actualizados en el repositorio. Git nos pedirá que dejemos un mensaje para recordar los cambios que hicimos y podemos usar el argumento -m para escribirlo (git commit -m "mensaje").
- git rm: este comando necesita alguno de los siguientes argumentos para poder ejecutarse correctamente:
- git rm --cached: Mueve los archivos que le indiquemos al estado Untracked.
- git rm --force: Elimina los archivos de Git y del disco duro. Git guarda el registro de la existencia de los archivos, por lo que podremos recuperarlos si es necesario (pero debemos usar comandos más avanzados).

- git init
  - creates a new Git repository
- git status
  - inspects the contents of the working directory and staging area
- git add
  - adds files from the working directory to the staging area
- git rm --cached nombreArchivo
  - Sirve para mover el archivo de lo que se agregará en el commit, es cuando por error agregamos archivos a
  los que no queremos hacer seguimiento.
- git diff numeroCommit otroNumeroCommit
  - shows the difference between the working directory and the staging area
  - 
- git commit
  - permanently stores file changes from the staging area in the repository
- git log
  - shows a list of all previous commits
- git log  - -oneline
- git log - - oneline - -graph
- git log -1
- git show
  - Muestra los cambios que se han realizado, directamente en la terminal

  - Muestra el último commit

- git checkout HEAD filename
  - Discards changes in the working directory.
- git reset HEAD filename
  - Unstages file changes in the staging area.
- git reset SHA
  - Can be used to reset to a previous commit in your commit history.
- git add filename_1 filename_2
- git checkout idCommit
  - Nos permite viajar en el tiempo Podemos volver a cualquier versión anterior de un archivo específico o incluso del proyecto entero
- git reset idCommit --hard  (Usar este comando con mucho cuidado)
  - Borra toda la información que tengamos en el área de staging (y perdiendo todo para siempre)
  - Borra todo. Todo todito, absolutamente todo. Toda la información de los commits y del área de staging se borra del historial.
- git reset idCommit --soft
  - Mantiene allí los archivos del área de staging para que podamos aplicar nuestros últimos cambios pero desde un commit anterior.
  - Borramos todo el historial y los registros de Git pero guardamos los cambios que tengamos en Staging, así podemos aplicar las últimas actualizaciones a un nuevo commit



- git branch -l
  - Lists all a Git project's branches.
- git branch branch_name
  - Creates a new branch.
- git checkout -b nombreRama
  - Crea la rama y te cambia a esa rama
- git branch -d nombreRama
  - Borra una rama de mi local
- git branch -D nombreRama
  - Forzar borrado de rama
- Git branch -m nombreActual nuevoNombreRama
  - Renombrar una rama
- git checkout branch_name
  - Used to switch from one branch to another.
- git merge branch_name
  - Used to join file changes from one branch to another.
- git branch -d branch_name

  - Deletes the branch specified.

- git clone
  - Creates a local copy of a remote.
- git remote -v
  - Lists a Git project's remotes.
- git fetch
  - Fetches work from the remote into the local copy.
- git merge origin/master
  - Merges origin/master into your local branch.
- git push origin <branch_name>
  - Pushes a local branch to the origin remote.
- git checkout -b nombreRama

  - Crea una rama y apunta a esa rama

- git stash
  - git stash list
  - git stash drop stash@{1}
  - git stash apply
  - Guardar cambios temporales en una rama
- git cherry-pick 0894d24
  - Sirve para elegir commits que erróneamente se hicieron en alguna otra rama
- touch .gitignore 
  www.gitignore.io

GitFlow: Es una una guía que nos da cierto estándares para manejar la ramificación de nuestros proyectos.
https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow
https://danielkummer.github.io/git-flow-cheatsheet/

fatal: remote origin already exists.
git remote rm origin

Modificar un commit:
git commit --amend. (Esto aplica para el último commit)
fn + i (para comenzar a editar)
esc
:wq (para guardar)
git push --force (Se refleja el cambio en github)

Hacer push de una rama local a github (Pushes a local branch to the origin remote):
git push origin <branch_name>

Issue de token:
remote: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead.
Solución:
https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/

Ir a github: Settings -> Developer settings -> Personal Access Tokens -> Generate new token

$ git clone https://github.com/username/repo.git
Username: your_username
Password: your_token (token recien generado en github)
